// <auto-generated />
using System;
using JobRegistrationSubmisson.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobRegistrationSubmisson.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200916052733_InitTableJobList")]
    partial class InitTableJobList
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobRegistrationSubmisson.Models.Employees", b =>
                {
                    b.Property<string>("EmpId");

                    b.Property<string>("Address");

                    b.Property<DateTimeOffset>("CreatedData");

                    b.Property<DateTimeOffset>("DeletedData");

                    b.Property<DateTimeOffset>("UpdatedData");

                    b.Property<bool>("isDelete");

                    b.HasKey("EmpId");

                    b.ToTable("TB_M_Employee");
                });

            modelBuilder.Entity("JobRegistrationSubmisson.Models.Joblist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateData");

                    b.Property<DateTimeOffset>("DeleteData");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("UpdateDate");

                    b.Property<bool>("isDelete");

                    b.HasKey("Id");

                    b.ToTable("TB_Trans_Joblist");
                });

            modelBuilder.Entity("JobRegistrationSubmisson.Models.JobSeeker", b =>
                {
                    b.Property<string>("JobSId");

                    b.Property<string>("Achievement");

                    b.Property<string>("Address");

                    b.Property<bool>("Approve");

                    b.Property<DateTime>("Birth_Date");

                    b.Property<string>("Experience");

                    b.Property<string>("GPA");

                    b.Property<string>("Gender");

                    b.Property<int?>("JoblistId");

                    b.Property<string>("Last_Education");

                    b.Property<string>("Marital_Status");

                    b.Property<string>("Nationality");

                    b.Property<DateTimeOffset>("RegistDate");

                    b.Property<bool>("Reject");

                    b.Property<DateTimeOffset>("RejectDate");

                    b.Property<string>("Religion");

                    b.Property<string>("Technical_Skill");

                    b.Property<DateTimeOffset>("UpdateDate");

                    b.HasKey("JobSId");

                    b.HasIndex("JoblistId");

                    b.ToTable("TB_M_JobSeeker");
                });

            modelBuilder.Entity("JobRegistrationSubmisson.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Tb_M_Role");
                });

            modelBuilder.Entity("JobRegistrationSubmisson.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("TB_M_User");
                });

            modelBuilder.Entity("JobRegistrationSubmisson.Models.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Tb_M_UserRole");
                });

            modelBuilder.Entity("JobRegistrationSubmisson.Models.Employees", b =>
                {
                    b.HasOne("JobRegistrationSubmisson.Models.User", "User")
                        .WithOne("Employees")
                        .HasForeignKey("JobRegistrationSubmisson.Models.Employees", "EmpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobRegistrationSubmisson.Models.JobSeeker", b =>
                {
                    b.HasOne("JobRegistrationSubmisson.Models.User", "User")
                        .WithOne("JobSeeker")
                        .HasForeignKey("JobRegistrationSubmisson.Models.JobSeeker", "JobSId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobRegistrationSubmisson.Models.Joblist", "Joblist")
                        .WithMany()
                        .HasForeignKey("JoblistId");
                });

            modelBuilder.Entity("JobRegistrationSubmisson.Models.UserRole", b =>
                {
                    b.HasOne("JobRegistrationSubmisson.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("JobRegistrationSubmisson.Models.User", "User")
                        .WithMany("userRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
